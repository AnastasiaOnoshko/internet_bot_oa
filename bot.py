from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# === –í–°–¢–ê–í –°–í–Ü–ô –¢–û–ö–ï–ù ===
BOT_TOKEN = "7811394855:AAGsvwF1ZTHn6SHHDjOM2DRc7pnrJPexe-Y"
GROUP_CHAT_ID = -1002544676823  # –§–æ—Ä—É–º-–≥—Ä—É–ø–∞

# –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
faq = {
    "—è–∫ –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å": "–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å, –∑–∞–π–¥—ñ—Ç—å —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å '–ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å'.",
    "–Ω–µ –º–æ–∂—É —É–≤—ñ–π—Ç–∏": "–°–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ñ—É–Ω–∫—Ü—ñ—ó '–ó–∞–±—É–≤ –ø–∞—Ä–æ–ª—å'. –Ø–∫—â–æ –Ω–µ –¥–æ–ø–æ–º–æ–∂–µ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º.",
    "—è–∫ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é": "–í–∏ –≤–∂–µ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—å üòÑ –ú–∏ –Ω–∞ –∑–≤'—è–∑–∫—É!"
}


active_tickets = {}
thread_to_user = {}


async def create_forum_topic(context: ContextTypes.DEFAULT_TYPE, user_full_name: str) -> int:
    result = await context.bot.create_forum_topic(
        chat_id=GROUP_CHAT_ID,
        name=f"–ó–∞–ø–∏—Ç –≤—ñ–¥ {user_full_name}"
    )
    return result.message_thread_id


async def send_message_to_topic(context: ContextTypes.DEFAULT_TYPE, user_id, user_full_name, message):
    if user_id not in active_tickets:
        thread_id = await create_forum_topic(context, user_full_name)
        active_tickets[user_id] = thread_id
        thread_to_user[thread_id] = user_id
    else:
        thread_id = active_tickets[user_id]

    text = f"üì© –ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ {user_full_name}:\n\n{message}"
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, message_thread_id=thread_id, text=text)
    return thread_id


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    user_id = update.effective_user.id
    name = update.effective_user.full_name

    for q in faq:
        if q in text:
            await update.message.reply_text(faq[q])
            return

    await update.message.reply_text("–ù–∞ –∂–∞–ª—å, —è –Ω–µ –∑–Ω–∞–π—à–æ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –ü–µ—Ä–µ–¥–∞—é –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É...")
    thread_id = await send_message_to_topic(context, user_id, name, update.message.text)

    await context.bot.send_message(
        chat_id=GROUP_CHAT_ID,
        message_thread_id=thread_id,
        text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ! –û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ."
    )

async def handle_group_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.is_topic_message:
        return

    thread_id = update.message.message_thread_id
    if thread_id not in thread_to_user:
        return

    user_id = thread_to_user[thread_id]
    text = update.message.text

    try:
        await context.bot.send_message(chat_id=user_id, text=f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n{text}")
    except Exception as e:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ñ—Ç–∞—é! –Ø –±–æ—Ç —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∏. –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è.")

async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–í–∞—à Chat ID: {update.effective_chat.id}")

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("id", get_id))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, handle_message))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, handle_group_reply))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –û—á—ñ–∫—É—î–º–æ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è...")
    app.run_polling()
